{"version":3,"sources":["components/cells/cell/cell.js","utilits/index.js","components/cells/cells.js","components/header/header.js","components/toolkit/toolkit.js","components/app/app.js","serviceWorker.js","index.js"],"names":["Cell","color","getClick","cellStyle","backgroundColor","border","defaultGrid","className","style","onMouseUp","onMouseMove","window","event","buttons","onTouchMove","createArray","sizeX","sizeY","Array","fill","Cells","defaultSize","useState","cellsState","setCellsState","addStyles","width","useEffect","map","elem","index","key","oldArray","el","changeArray","updateCell","Title","Typography","Header","mark","Option","Select","Toolkit","props","changeSize","changeGrid","changeColor","stringDefaultSize","defaultValue","onChange","value","defaultChecked","checkedChildren","BorderlessTableOutlined","unCheckedChildren","checked","onChangeComplete","hex","App","size","setSize","grid","setGrid","setColor","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.047f4c0e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './cell.css';\r\n\r\nfunction Cell({color, getClick, defaultGrid }) {\r\n\r\n  const cellStyle = {\r\n    backgroundColor: color,\r\n    border: defaultGrid ? \"0.1px solid black\": \"none\"\r\n  }\r\n\r\n  const mouseController = () => {\r\n    if (window.event.buttons === 1) getClick();\r\n  }\r\n  return (\r\n    <div className=\"Cell\" style={cellStyle} \r\n      onMouseUp= { getClick }\r\n      onMouseMove = { mouseController } \r\n      onTouchMove = { getClick }\r\n      >\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cell;","export const createArray = (sizeX = 1, sizeY = 1) => {\r\n  const color = \"#fff\"; \r\n  return Array(sizeX*sizeY).fill(color)\r\n}\r\n\r\nexport const changeArray = (oldArray, elem, color) => {\r\n    return oldArray.map((el, index)=> ( index===elem ? color : el))\r\n}\r\n\r\n","import React, { useState, useEffect }  from 'react';\r\nimport './cells.css';\r\nimport Cell from './cell'\r\nimport { createArray }  from '../../utilits'\r\nimport { changeArray }  from '../../utilits'\r\n\r\nfunction Cells({defaultSize, defaultGrid, color}) {\r\n  const [cellsState, setCellsState] = useState(createArray(defaultSize,defaultSize));\r\n\r\n  const updateCell = (index) => {\r\n    setCellsState(changeArray(cellsState, index, color ))\r\n  }\r\n\r\n  let addStyles = {\r\n    width: defaultSize*32+\"px\"\r\n  }\r\n\r\n  useEffect(()=> {\r\n    setCellsState(createArray(defaultSize,defaultSize))\r\n  }, [defaultSize])\r\n\r\n  return (\r\n    <div className=\"Cells\" style={addStyles}>\r\n      {cellsState.map((elem , index )=> \r\n          (<Cell \r\n            key={index} \r\n            color={elem} \r\n            getClick = {() => updateCell(index)}\r\n            defaultGrid = {defaultGrid}\r\n            />\r\n          )\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cells;","import React from 'react';\r\nimport './header.css';\r\nimport { Typography } from 'antd';\r\n\r\nconst { Title } = Typography;\r\n\r\nfunction Header() {\r\n\r\n  return (\r\n    <div >\r\n      <Title mark>Simple Pixel Editor v 0.1</Title>     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './toolkit.css';\r\nimport { Select, Switch } from 'antd';\r\nimport { BorderlessTableOutlined } from '@ant-design/icons';\r\nimport { CompactPicker } from 'react-color';\r\n\r\nconst { Option } = Select;\r\n\r\nfunction Toolkit(props) {\r\n\r\n  const {defaultSize, changeSize, changeGrid, color, changeColor } = props;\r\n\r\n  function handleChange(value) {\r\n    changeSize(value)\r\n  }\r\n\r\n  function onChange(checked) {\r\n    changeGrid(checked);\r\n  }\r\n\r\n  function handleChangeComplete(value)  {\r\n    changeColor(value.hex);\r\n  };\r\n\r\n  const stringDefaultSize = defaultSize + \"x\" + defaultSize;\r\n\r\n  return (\r\n    <div className=\"Toolkit\">  \r\n      <Select defaultValue={stringDefaultSize} style={{ width: 100 }} onChange={handleChange}>\r\n        <Option value=\"8\">8x8</Option>\r\n        <Option value=\"16\">16x16</Option>\r\n        <Option value=\"32\" >32x32</Option>\r\n      </Select>  \r\n      <Switch defaultChecked \r\n        checkedChildren={<BorderlessTableOutlined />}\r\n        unCheckedChildren={<BorderlessTableOutlined />} \r\n        onChange={onChange} />\r\n      <CompactPicker color= {color} onChangeComplete={ handleChangeComplete } />\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Toolkit;","import React, {useState} from 'react';\nimport './app.css';\nimport Cells from '../cells'\nimport Header from '../header'\nimport Toolkit from '../toolkit'\n\nfunction App() {\n\n  const [size, setSize] = useState(16);\n  const [grid, setGrid] = useState(true);\n  const [color, setColor] = useState(\"#fff\");\n\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Toolkit defaultSize={size} changeSize={setSize}\n               defaultGrid={grid} changeGrid={setGrid}\n               color={color} changeColor={setColor} >\n      </Toolkit>\n      <Cells defaultSize={size} defaultGrid={grid} color={color}></Cells>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}